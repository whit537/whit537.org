#!/usr/bin/env python
from __future__ import absolute_import, division, print_function, unicode_literals

import os
import sys
import shlex
from string import Template
from collections import defaultdict


def fail(m, *a):
    print(m.format(*a))
    sys.exit(1)

def update_env(envfilepaths, verbose=False):
    for envfilepath in envfilepaths:
        try:
            envfile = open(envfilepath)
        except IOError:
            if verbose:
                print("WARNING: Ignoring missing environment file {}.".format(envfilepath))
            continue
        for line in envfile:
            line = line.split('#', 1)[0].strip()
            if not line:
                continue
            k, v = [x.strip() for x in line.split('=', 1)]
            os.environ[k] = v
        if verbose:
            print("SUCCESS: Updated environment with values from {}.".format(envfilepath))


if len(sys.argv) < 2:
    fail( """\
usage: {0} <envfile>* <proctype>
       {0} <envfile>* -c <cmd>

<proctype> must match an entry in ./Procfile. <cmd> can be whatever."""
        , sys.argv[0]
         )

try:
    cindex = sys.argv.index('-c')
except ValueError:
    proctype = sys.argv[-1]
else:
    proctype = None
    envfilepaths = sys.argv[1:cindex]
    command = " ".join(sys.argv[cindex+1:])

if proctype:
    envfilepaths = sys.argv[1:-1]

    try:
        procfile = open('Procfile')
    except IOError:
        fail("Process type given ('{}'), but no ./Procfile found.", proctype)

    for line in procfile:
        proctype, command = [x.strip() for x in line.split(':', 1)]
        if proctype == proctype:
            break
    else:
        fail("Process type '{}' not found in ./Procfile.", proctype)

update_env(envfilepaths)
subenv = defaultdict(unicode)
subenv.update(os.environ)

tmp = Template(command)
subbed = tmp.substitute(subenv)
parts = shlex.split(subbed)

os.execvp(parts[0], parts)
