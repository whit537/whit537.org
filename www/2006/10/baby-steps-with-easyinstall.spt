title = "Baby steps with easy_install"
published = "2006-10-25T10:47:00.000-04:00"
updated = "2011-04-10T09:52:45.413-04:00"
[---]
[---] text/html
{% extends "base.html" %}
{% block content %}
Per my last post, I'm <a href="http://tech.whit537.org/2006/10/my-name-is-chad-and-i-have-nih.html">sipping some setuptools kool-aid</a>. Here's a report of progress so far.<br /><ol><li>I compiled and installed a Python 2.5 system under <span style="font-family:courier new;">~/python/2.5-easy_install</span> expressly for this experiment. The interpreter is accessible as <span style="font-family:courier new;">~/bin/ezpy</span>.<br /></li><li>I cleared out the remaining vestige of a previous abortive attempt to grok setuptools (easy_install in <span style="font-family:courier new;">/usr/local/bin</span>).</li><li>I downloaded ez_setup.py and ran it using ezpy. It installed the script and libraries under <span style="font-family:courier new;">~/python/2.5-</span><span style="font-family:courier new;">easy_install</span><span style="font-family:courier new;"></span> , as I'd hoped it would.</li><li>I ran <span style="font-family:courier new;">easy_install nose</span>, then <span style="font-family:courier new;">ezpy -c "import nose"</span>. Looks like it worked.</li><li>I ran <span style="font-family:courier new;">easy_install urwid</span>, then <span style="font-family:courier new;">ezpy -c "import urwid"</span>. Looks like that worked too.</li><li>For kicks, I ran <span style="font-family:courier new;">nosetests -w site-packages/testosterone/tests</span> in <a href="https://www.zetadev.com/svn/public/testosterone/trunk/">my testosterone development directory</a>. It didn't find any tests, but easy_install had installed nosetests in <span style="font-family:courier new;">~/python/2.5-</span><span style="font-family:courier new;">easy_install</span> , as I'd hoped.</li></ol>So easy_install is working as advertised. It was indeed easier to install nose and urwid using easy_install than otherwise, although neither had any dependencies. In my experience, packaging systems break because of conflicting dependencies (actual packaging bugs being rarer). And my gut is that there's some kind of stability threshold at maybe a dozen packages or so.  It makes sense, then, to use easy_install with <a href="http://cheeseshop.python.org/pypi/workingenv.py">some kind</a> of <a href="http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python">quarantine</a> <a href="http://cheeseshop.python.org/pypi/zc.buildout">system</a>.<br /><br />On a related note, I generally like to bundle all dependencies with whatever system I'm deploying or distributing, rather than relying on remote URLs, because remote URLs aren't under my control: they can change, sites can go down, etc. To me, the control and simplicity of having all dependencies together in one place is worth the redundancy. Afaict this pattern could still fit with easy_install if one were to build "monolithic" eggs.<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/36506138-8014805058659907488?l=blag.whit537.org' alt='' /></div>
{% endblock %}
